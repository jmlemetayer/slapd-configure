#!/bin/bash -e

is_installed() { dpkg --status ${@} >/dev/null 2>&1; }

if ! is_installed debconf ldap-utils slapd
then
	echo >&2 "Please install the needed packages:"
	echo >&2 "   apt install debconf ldap-utils slapd"
	exit 1
fi

read -p "Remove old database? [Y/n] " REMOVE_DB

case ${REMOVE_DB:-y} in
	y|Y) rm --recursive --force /var/lib/ldap /etc/ldap/slapd.d ;;
esac

read_password()
{
	local PASSWORD PASSWORD_2

	read -sp "Enter ${1} Password: " PASSWORD && echo >&2

	if [ -z "${PASSWORD}" ]
	then
		echo >&2 "Sorry, empty passwords are not allowed"
		return 1
	fi

	read -sp "Retype ${1} Password: " PASSWORD_2 && echo >&2

	if [ "${PASSWORD}" != "${PASSWORD_2}" ]
	then
		echo >&2 "Sorry, passwords do not match"
		return 1
	else
		echo ${PASSWORD}
	fi
}

ADMIN_PASSWORD="$(read_password "Admin")"
CONFIG_PASSWORD="$(read_password "Config")"
READONLY_PASSWORD="$(read_password "Read Only")"

CONFIG_PASSWORD_ENCRYPTED=$(slappasswd -s "${CONFIG_PASSWORD}")
READONLY_PASSWORD_ENCRYPTED=$(slappasswd -s "${READONLY_PASSWORD}")

is_readable() { su openldap --shell /bin/sh -- -c "test -r ${1}"; }

read_file()
{
	local FILE

	read -p "${1}: " FILE

	if [ -z "${FILE}" ]
	then
		echo >&2 "Sorry, empty files are not allowed"
		return 1

	elif ! is_readable ${FILE}
	then
		echo >&2 "Cannot access '${FILE}'"
		return 1
	else
		echo ${FILE}
	fi
}

TLS_KEY_PATH="$(read_file "TLS private key file (privkey.pem)")"
TLS_CRT_PATH="$(read_file "TLS server certificate file (cert.pem)")"
TLS_CA_CRT_PATH="$(read_file "TLS CA certificate file (fullchain.pem)")"
TLS_DH_PARAM_PATH="$(read_file "TLS DH parameter file (dhparam.pem)")"

DOMAIN=$(hostname --domain)
BASE_DN=$(awk 'BEGIN{FS="."} {
	for (i = 1; i <= NF; i++) {
		printf("dc=%s%s", $(i), (i < NF) ? "," :"");
	}}' <<< ${DOMAIN})

exec 3>&1 >/dev/null

cat << EOF | debconf-set-selections
slapd slapd/password2 password ${ADMIN_PASSWORD}
slapd slapd/password1 password ${ADMIN_PASSWORD}
slapd slapd/domain string ${DOMAIN}
slapd shared/organization string ${DOMAIN}
slapd slapd/backend string MDB
slapd slapd/purge_database boolean true
slapd slapd/move_old_database boolean true
slapd slapd/allow_ldap_v2 boolean false
slapd slapd/no_configuration boolean false
slapd slapd/dump_database select when needed
EOF

dpkg-reconfigure --frontend noninteractive slapd

service slapd restart

generate_ldif()
{
	sed 	--expression "s|{{ BASE_DN }}|${BASE_DN}|g" \
		--expression "s|{{ CONFIG_PASSWORD_ENCRYPTED }}|${CONFIG_PASSWORD_ENCRYPTED}|g" \
		--expression "s|{{ READONLY_PASSWORD_ENCRYPTED }}|${READONLY_PASSWORD_ENCRYPTED}|g" \
		--expression "s|{{ TLS_CA_CRT_PATH }}|${TLS_CA_CRT_PATH}|g" \
		--expression "s|{{ TLS_CRT_PATH }}|${TLS_CRT_PATH}|g" \
		--expression "s|{{ TLS_DH_PARAM_PATH }}|${TLS_DH_PARAM_PATH}|g" \
		--expression "s|{{ TLS_KEY_PATH }}|${TLS_KEY_PATH}|g" \
		${1}
}

for ldif in ${0%/*}/ldif/external/*
do
	echo >&3 "Processing file: ${ldif##*ldif/}"
	generate_ldif ${ldif} | ldapmodify -Y EXTERNAL -Q -H ldapi:///
done

for ldif in ${0%/*}/ldif/localhost/*
do
	echo >&3 "Processing file: ${ldif##*ldif/}"
	generate_ldif ${ldif} | ldapmodify -h localhost -p 389 \
		-D "cn=admin,${BASE_DN}" -w "${ADMIN_PASSWORD}"
done

for ldif in ${0%/*}/ldif/tls/*
do
	echo >&3 "Processing file: ${ldif##*ldif/}"
	generate_ldif ${ldif} | ldapmodify -Y EXTERNAL -Q -H ldapi:///
done

add_config()
{
	if grep -qc "^${2}" "${1}"
	then
		sed --in-place --follow-symlinks "s|^${2}.*|${2}${3}|g" "${1}"
	else
		echo "${2}${3}" >> "${1}"
	fi
}

add_config /etc/default/slapd SLAPD_SERVICES "=\"ldap:/// ldaps:/// ldapi:///\""
add_config /etc/ldap/ldap.conf TLS_KEY " ${TLS_KEY_PATH}"
add_config /etc/ldap/ldap.conf TLS_CERT " ${TLS_CRT_PATH}"
add_config /etc/ldap/ldap.conf TLS_CACERT " ${TLS_CA_CRT_PATH}"
add_config /etc/ldap/ldap.conf TLS_REQCERT " try"

service slapd restart
